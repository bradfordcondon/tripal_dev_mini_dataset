<<<<<<< HEAD
The files in this folder are simple scripts for parsing and minifying data.
=======
The files in this folder are simple scripts for parsing data.
>>>>>>> a1d67450ede755fd16cd14e51b1914f4458195cd


## extract_FASTA.pl
(requires bioperl)
<<<<<<< HEAD
**Input:** the raw FASTA file and a textfile consisting of newline seperated FASTA headers to extract.
Used to easily extract subset of scaffolds from scaffold list.

**Usage:** `perl extract_FASTA.pl -i BATG-0.5-CLCbioSSPACE.fa -l scaffold_list.txt`
=======
Input: the raw FASTA file and a textfile consisting of newline seperated FASTA headers to extract.  Used to easily extract subset of scaffolds from scaffold list.

Usage: `perl extract_FASTA.pl -i BATG-0.5-CLCbioSSPACE.fa -l scaffold_list.txt`
>>>>>>> a1d67450ede755fd16cd14e51b1914f4458195cd


## generate_biomaterials

<<<<<<< HEAD
A simple script that generates fake biomaterials XML.
There are 5 properties for each biomaterial: one is a constant type with one of two values (ensuring there are properties to compare).  One's value is a number.
=======
A simple script that generates fake biomaterials XML.  There are 5 properties for each biomaterial: one is a constant type with one of two values (ensuring there are properties to compare).  One's value is a number.
>>>>>>> a1d67450ede755fd16cd14e51b1914f4458195cd

Usage:

` python generate_biomaterials.py [number of biomaterials to create]`

example output (formatted for legibility):

```xml
<BioSampleSet>
	<BioSample accession="let" id="billion" submission_date="1987-01-21">
		<IDs db="BioSample" is_primary="1">let</IDs>
		<Description>Individual democratic military far investment feeling.</Description>
		<Owner>
			<Name>Andrew Lowery</Name>
			<Address>15300 Kimberly Cove
New Aimeeberg, WY 70035</Address>
		</Owner>
		<Attributes>
			<Attribute attribute_name="system" display_name="system" harmonized_name="system">short</Attribute>
			<Attribute attribute_name="day" display_name="day" harmonized_name="day">dream</Attribute>
			<Attribute attribute_name="conference" display_name="conference" harmonized_name="conference">north</Attribute>
			<Attribute attribute_name="movie" display_name="movie" harmonized_name="movie">despite</Attribute>
			<Attribute attribute_name="information" display_name="information" harmonized_name="information">forget</Attribute>
			<Attribute attribute_name="relationship">24</Attribute>
		</Attributes>
	</BioSample>
	</BioSampleSet>
```

## generate_expression

<<<<<<< HEAD
A script for generating random expression data in matrix format.  Values are random between 1 and 1000, with a value for each mRNA in the input FASTA file and each biomaterial in the XML file.

**Usage:**

`python generate_expression.py [biomaterials xml] [fasta file]`

=======
Usage:

`python generate_expression.py [biomaterials xml] [fasta file]`

Creates a tab delimited expression dataset (with random values between 1 and 1000).
>>>>>>> a1d67450ede755fd16cd14e51b1914f4458195cd


## minify_dataset

<<<<<<< HEAD
Minifies a dataset.

**Usage:**

=======
>>>>>>> a1d67450ede755fd16cd14e51b1914f4458195cd
`python minify_dataset.py [number of mRNA to use] [mrna FASTA file] [polypeptide FASTA] [polypeptide regexp] [GFF file]`


Given n, a FASTA file, & a GFF file, trim the FASTA file down to n.
Then, remove all items from the GFF not containing the mRNA.
Next, run `trim_polypeptide` to trim the polypeptide FASTA down to the mRNA
(it is a seperate command because a REGEXP is required to link the two.)

## trim polypeptide.py

This script trims one fasta file against another given a regexp.  In our use case, we match the protein sequences against the mRNA, given a Regexp.
The regexp should search the protein name and give the corresponding mRNA name.

   `python trim_polypeptide.py [trimmed mrna FASTA] [polypeptide FASTA] [regexp]`

```shell
python staton_biopy/trim_polypeptide.py mrna_mini.fasta input_data/FexcelsiorAA.minoas.fasta '(FRA.*?)(?=:)'
```